const getLocalVideoContainer=()=>document.querySelector("#local-video");let iceServers=null,userUUID=null,roomUUID=null,connectedUsers=[],localVideoStream=null,connection=null,websocketSuccess=!1,websocketError=!1,webRTCError=!1,webRTCErrorAudioInUse=!1,webRTCErrorAudioNotAllowed=!1,webRTCErrorVideo=!1,webRTCErrorVideoInUse=!1,webRTCErrorVideoNotAllowed=!1,videoTest=!1;const setIceServers=n=>{iceServers=n},setUserUUID=n=>{userUUID=n},setRoomUUID=n=>{roomUUID=n},setVideoTest=n=>{videoTest=n},getConnectedUsers=()=>connectedUsers,getWebsocketSuccess=()=>websocketSuccess,getWebsocketError=()=>websocketError,getWebRTCError=()=>webRTCError,getWebRTCErrorAudioInUse=()=>webRTCErrorAudioInUse,getWebRTCErrorAudioNotAllowed=()=>webRTCErrorAudioNotAllowed,getWebRTCErrorVideo=()=>webRTCErrorVideo,getWebRTCErrorVideoInUse=()=>webRTCErrorVideoInUse,getWebRTCErrorVideoNotAllowed=()=>webRTCErrorVideoNotAllowed,setConnection=n=>{connection=new WebSocket(n),connection.onopen=()=>{send({type:"login"}),logValues("SUCCESS WSS","Connected to WSS"),websocketSuccess=!0,videoTest||setServer(iceServers[0].urls+","+n,null,!1)},connection.onmessage=t=>{const e=JSON.parse(t.data);switch(e.type){case"login":handleLogin(e.success,e.usersList);break;case"userDisconnect":handleUserDisconnect(e.success,e.userUUID);break;case"offerVideo":handleOfferVideo(e.offer,e.userUUID);break;case"answerVideo":handleAnswerVideo(e.answer,e.userUUID);break;case"candidateVideo":handleCandidateVideo(e.candidate,e.userUUID);break;case"mute":handleMute(e.status,e.userUUID)}},connection.onerror=t=>{logValues("ERROR WSS","Error with connection to WSS: "+t),websocketError=!0,videoTest||setServer(null,JSON.stringify("Client - Error in connection establishment: net::ERR_CONNECTION_REFUSED with WSS"),!0)}},setServer=(n,t,e)=>{const o=new XMLHttpRequest;o.open("POST","/api/visit/customer/server/"+roomUUID),o.setRequestHeader("Content-Type","application/json"),e&&(o.onload=()=>{4===o.readyState&&200===o.status&&location.reload()}),o.send(JSON.stringify({server:n,error:t,browser:getBrowserName(navigator.userAgent)}))},logValues=(n,t)=>{const e=new XMLHttpRequest;e.open("POST","/api/visitLog/create"),e.setRequestHeader("Content-Type","application/json"),e.send(JSON.stringify({visit:roomUUID,status:"CLIENT: "+n,log:userUUID+": "+JSON.stringify(t)+" ("+getBrowserName(navigator.userAgent)+")"+(videoTest?" TEST":"")}))},send=n=>{n.roomUUID||(n.roomUUID=roomUUID),n.userUUID||(n.userUUID=userUUID),connection.send(JSON.stringify(n))};window.addEventListener("beforeunload",()=>{connectedUsers=[],send({type:"userDisconnect",roomUUID,userUUID}),logValues("SUCCESS WSS","Disconnected from WSS")}),window.addEventListener("close",()=>{connectedUsers=[],send({type:"userDisconnect",roomUUID,userUUID}),logValues("SUCCESS WSS","Disconnected from WSS")});const handleMute=(n,t)=>{const e=connectedUsers.find(o=>o.uuid===t);e&&e.srcObject?(e.srcObject.muted=n,e.srcObject.enabled=!n,logValues("SUCCESS WSS",t+(n?" ":" un")+"muted")):logValues("ERROR WSS",t+" cannot be "+(n?" ":"un")+"muted - srcObject: "+!(null==e||!e.srcObject)+", user: "+!!e)},createVideoPeer=n=>{const t={iceServers};let e=connectedUsers.find(o=>o.uuid===n);e||(e={uuid:n,videoConnection:null,srcObject:null},connectedUsers.push(e),logValues("CONNECTION TURN","Stream user: "+n+". Added connection to pool")),localVideoStream&&(e.videoConnection=new RTCPeerConnection(t),logValues("CONNECTION TURN","Connection configuration read"),e.videoConnection.addStream(localVideoStream),logValues("CONNECTION TURN","Local video streamed"),e.videoConnection.onaddstream=o=>{logValues("CONNECTION TURN","Stream user: "+e.uuid+". Video stream added"),e.srcObject=o.stream},e.videoConnection.onconnectionstatechange=o=>{var r,s;"failed"===(null==(r=o.target)?void 0:r.connectionState)&&e.videoConnection&&e.videoConnection.restartIce&&e.videoConnection.restartIce(),logValues("CONNECTION TURN","Stream user: "+e.uuid+". Connection state changed: "+(null==(s=o.target)?void 0:s.connectionState))},e.videoConnection.onicecandidate=o=>{o.candidate&&(logValues("CONNECTION TURN","Stream user: "+e.uuid+". Ice candidate sent"),send({type:"candidateVideo",userUUID,callUserUUID:e.uuid,candidate:o.candidate,roomUUID}))})},handleLogin=(n,t)=>{n?(connectedUsers=t.map(e=>({uuid:e,videoConnection:null,srcObject:null})),getUserStream({audio:!0,video:{width:320,height:240}},t).catch(e=>{logValues("ERROR RTC","Video cannot be obtained: "+getWebRTCErrorMessage(e)),"NotReadableError"===e.name||"TrackStartError"===e.name?webRTCErrorVideoInUse=!0:"NotAllowedError"===e.name||"PermissionDeniedError"===e.name?webRTCErrorVideoNotAllowed=!0:webRTCErrorVideo=!0,getUserStream({audio:!0,video:!1},t).catch(o=>{logValues("ERROR RTC","Audio cannot be obtained: "+getWebRTCErrorMessage(o)),setServer(null,JSON.stringify("Client - Error with WebRTC: "+getWebRTCErrorMessage(o)),!1),"NotReadableError"===o.name||"TrackStartError"===o.name?webRTCErrorAudioInUse=!0:"NotAllowedError"===o.name||"PermissionDeniedError"===o.name?webRTCErrorAudioNotAllowed=!0:webRTCError=!0})})):(logValues("ERROR WSS","User already connected"),alert("Ten u\u017cytkownik w tym momencie ju\u017c prowadzi rozmow\u0119. Sprawd\u017a czy wszystkie karty przegl\u0105darki zosta\u0142y poprzednio zamkni\u0119te lub strona wykorzystuj\u0105ca mikrofon lub kamer\u0119 nie jest otworzona w tle."))},getUserStream=(n,t)=>navigator.mediaDevices.getUserMedia(n).then(e=>{localVideoStream=e;const o=document.querySelector("#local-video");o&&(o.srcObject=e,o.muted=!videoTest,o.enabled=videoTest),logValues("SUCCESS RTC","Video or audio obtained: "+JSON.stringify(n));const r=connectedUsers.map(i=>i.uuid);t.filter(i=>r.includes(i)).forEach(i=>{setTimeout(()=>{callTo(i)},1e3)})}),handleUserDisconnect=(n,t)=>{connectedUsers=connectedUsers.filter(e=>e.uuid!==t)},callTo=n=>{createVideoPeer(n);const t=connectedUsers.find(e=>e.uuid===n);null!=t&&t.videoConnection&&t.videoConnection.createOffer({iceRestart:!0,offerToReceiveAudio:!0,offerToReceiveVideo:!0}).then(e=>{t.videoConnection.setLocalDescription(e).then(()=>{logValues("SUCCESS WSS","Stream user: "+t.uuid+". Sending offer"),send({type:"offerVideo",offer:e,callUserUUID:n,userUUID,roomUUID})})}).catch(()=>{logValues("ERROR WSS","Stream user: "+t.uuid+" . Error when creating an offer")})},handleOfferVideo=(n,t)=>{createVideoPeer(t);const e=connectedUsers.find(o=>o.uuid===t);null!=e&&e.videoConnection&&(logValues("SUCCESS WSS","Stream user: "+e.uuid+". Obtained offer"),e.videoConnection.setRemoteDescription(new RTCSessionDescription(n)).then(()=>{e.videoConnection.createAnswer().then(o=>{e.videoConnection.setLocalDescription(o).then(()=>{logValues("SUCCESS WSS","Stream user: "+e.uuid+". Sending answer"),send({type:"answerVideo",answer:o,callUserUUID:t,userUUID,roomUUID})})}).catch(()=>{logValues("ERROR WSS","Stream user: "+e.uuid+" . Error when creating a answer")})}).catch(()=>{logValues("ERROR WSS","Stream user: "+e.uuid+" . Error when obtaining an offer")}))},handleAnswerVideo=(n,t)=>{const e=connectedUsers.find(o=>o.uuid===t);e.videoConnection.setRemoteDescription(new RTCSessionDescription(n)).then(()=>{logValues("SUCCESS WSS","Stream user: "+e.uuid+". Obtained answer")}).catch(()=>{logValues("ERROR WSS","Stream user: "+e.uuid+" . Error when obtaining a answer")})},handleCandidateVideo=(n,t)=>{const e=connectedUsers.find(o=>o.uuid===t);e.videoConnection&&e.videoConnection.addIceCandidate(new RTCIceCandidate(n)).then(()=>{logValues("SUCCESS WSS","Stream user: "+e.uuid+". Obtained candidate")}).catch(()=>{logValues("ERROR WSS","Stream user: "+e.uuid+" . Error when obtaining a candidate")})},getBrowserName=n=>{let t="";return n.includes("Mobile")&&(t="Mobile - "),n.includes("Firefox")?t+"Mozilla Firefox":n.includes("SamsungBrowser")?t+"Samsung Internet":n.includes("Opera")||n.includes("OPR")?t+"Opera":n.includes("Trident")?t+"Microsoft Internet Explorer":n.includes("Edge")?t+"Microsoft Edge (Legacy)":n.includes("Edg")?t+"Microsoft Edge (Chromium)":n.includes("Chrome")?t+"Google Chrome or Chromium":n.includes("CriOS")?t+"Google Chrome or Chromium (iOS)":n.includes("FxiOS")?t+"Mozilla Firefox (iOS)":n.includes("Safari")?t+"Apple Safari":t+"unknown"},getWebRTCErrorMessage=n=>{let t="Cannot obtain UserMedia device video. Another error occurred";return"NotFoundError"===n.name||"DevicesNotFoundError"===n.name?t="Cannot obtain UserMedia device video. Required track is missing":"NotReadableError"===n.name||"TrackStartError"===n.name?t="Cannot obtain UserMedia device video. Webcam or mic are already in use":"OverconstrainedError"===n.name||"ConstraintNotSatisfiedError"===n.name?t="Cannot obtain UserMedia device video. Constraints can not be satisfied by available devices":"NotAllowedError"===n.name||"PermissionDeniedError"===n.name?t="Cannot obtain UserMedia device video. Permission Denied":("TypeError"===n.name||"TypeError"===n.name)&&(t="Cannot obtain UserMedia device video. Both audio and video are FALSE"),t+": "+JSON.stringify(n.name)+" - "+JSON.stringify(n.message)};