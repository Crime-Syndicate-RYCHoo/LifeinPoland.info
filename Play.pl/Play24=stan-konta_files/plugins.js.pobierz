/* get querystring from link */
function queryString() {
    var params  = {}, url = document.location.search.substr(1);
    if (url !== '') {
        url = url.split('&');
        for (var i = 0; url.length > i; i++) {
            var val = url[i].split('=');
            params[decodeURI(val[0])] = decodeURI(val[1]);
        }
    } else return false;
    return params;
}

/* FORMS */
var forms = {
    ph : {
        key     : '',
        index   : 0,
        list    : {}
    }
};
$.fn.placeholder = function() {

	var init = function(elem) {
        if ($(elem).attr('name') !== undefined) forms.ph.key = $(elem).attr('name');
        else {
            forms.ph.index++; forms.ph.key = 'unnamed' + forms.ph.index;
            $(elem).attr('name', forms.ph.key);
        }
        forms.ph.list[forms.ph.key] = $(elem).data('placeholder');
	};

    var events = function(elem) {
        $(elem).bind('focus', function() {
            if ($(elem).val() === forms.ph.list[$(elem).attr('name')] && $(elem).is('input')) $(elem).val('');
            else if ($(elem).val() === forms.ph.list[$(elem).attr('name')] && $(elem).is('textarea')) $(elem).text('');
        });
        $(elem).bind('blur', function() {
            if ($(elem).val() === ''&& $(elem).is('input')) $(elem).val(forms.ph.list[$(elem).attr('name')]);
            else if ($(elem).val() === ''&& $(elem).is('textarea')) $(elem).text(forms.ph.list[$(elem).attr('name')]);
        });
    };
    return this.each(function() { init(this); events(this); } );
};
$('.intPrefix').focus(function() {
    $(this).prev('input').focus();
});

$(document).ready(function() {
if (document.getElementById('rollout')) {
    var menu = document.getElementById('rollout'), wait = function() {}, wait2 = function() {}, last,
        waitBlok = function(){}, trigger = false;

    function getPrevious(elem) {
        var prev = 0;
        for (var i = 0; i < elem.parentNode.children.length; i++) {
            if (elem.parentNode.children[i].id == elem.id) prev = i-1;
        };
        if (prev >= 0) return elem.parentNode.children[prev].children[0];
    };

    var hideBlock = function(elem) {

        var prev = getPrevious(elem);
        if (prev) prev.className = prev.className.replace(' emptyRight', '');

        var cssClass = (elem.children[0].className.indexOf('active') != -1) ? 'menu active' : 'menu';
        elem.children[0].className = cssClass;
        elem.children[0].children[0].style.display = 'none';
        elem.children[1].style.display = 'none';
    };

    var showSubMenu = function(target, that){
        if (target.className != 'dropDownContener') {

            clearTimeout(wait);
            if (last !== undefined) hideBlock(last);

            var prev = getPrevious(that);
            if (prev) prev.className = prev.className + ' emptyRight';

            var cssClass = (that.children[0].className.indexOf('active') != -1) ? 'menu dropDownOn active' : 'menu dropDownOn';
            that.children[0].className = cssClass;
            that.children[0].children[0].style.display = 'inline-block';
            that.children[1].style.display = 'block';
        };
    }

    var menuItemsLength = menu.children.length;
    if($('#cart').length>0) menuItemsLength = menuItemsLength-1;
    if(navigator.userAgent.match(/IEMobile/i)) {
        for (var i = 0; i < menuItemsLength; i++) {
            menu.children[i].onclick = function(e) {
                for(var j=0; j<menuItemsLength; j++) {
                    hideBlock(menu.children[j]);
                }
                if (!e) e = window.event;
                var target = e.target || e.srcElement,
                    that = this;
                showSubMenu(target, that);
            };
            var inspan = document.createElement('span');
            menu.children[i].children[0].children[0].appendChild(inspan);
        };
            $('body').on('click', function(e){
                var a = e.target;
                if($('body').find(a).parents().hasClass('menu_v2')) { }
                else {
                    for(var j=0; j<menuItemsLength; j++) {
                        hideBlock(menu.children[j]);
                    }
                }
            });
    } else {
     var hideMenu = true, that, last, isShowing=false;
        for (var i = 0; i < menuItemsLength; i++) {
            //menu.children[i].onmouseover = function(e) {
        	menu.children[i].onclick = function(e) {
                 clearTimeout(wait2);
                 if (!e) e = window.event;
                 var target = e.target || e.srcElement;
                 that = this;
                 if($(e.target).parents('.menuLinkList').size() > 0) {
                     // don't hide the submenu if clicking on list element
                     return;
                 } else if (that === last) { // lbu - hide on 2nd click
                	 hideBlock(that);
                	 last = undefined;
                	 isShowing = false;
                	 return;
                 }
                 if($('.dropDownOn').length>0) {
                      wait = setTimeout(function() {
                                showSubMenu(target, that);
                                 last = that;
                                 isShowing = true;
                         }, 100);
                         hideMenu = false;
                } else {
                     showSubMenu(target, that);
                      last = that;
                      setTimeout(function() { // avoid hiding in next onClick handler
                           isShowing = true;
                      	}, 100);
                }
            };

            var inspan = document.createElement('span');
            menu.children[i].children[0].children[0].appendChild(inspan);
        };
        // close menu when clicked outside
        $('body').on('click', function(e){
            var a = e.target;
            if (isShowing === true && last != undefined && $(e.target).parents('.menuLinkList').size() == 0) {
                hideBlock(last);
                last = undefined;
                isShowing = false;
            }
        });

    }

    $("body").on('touchstart', function(event) {
        var target = $(event.target),
        a = target.parents('ul#rollout').length;
        if(a==0) { $('.dropDownContener').hide(); $('#rollout > li a.menu').find('span').hide();}
    });


    if ($('html').hasClass('lt-ie8')) {
        $('.linkArea .linkPointer').each(function() {
            $(this).parents('.listContent').show();
            $(this).parents('.dropDownContener').show();
            if($(this).height() > 25) {
                $(this).addClass('nobg').append('<img class="pointer" src="_img/_section/linkPointer.png" />');
            };
            $(this).parents('.listContent').hide();
            $(this).parents('.dropDownContener').hide();
        });
    };
}});

var saytData;
$.fn.searchSAYT = function(options) {
	var defaults = {
		idAutocomplete: 'sayt',
		dataUrl: 'http://szukaj.play.pl/cache/_js/sayt_prompt.js',
		displayItems: 3
	};

    if($('input#q').hasClass('new')) {
        var activeItem = -1;

        $.extend(defaults, options);

        var events = function(elem) {
            var $elem = $(elem);
            $('#gcs').append('<ul id="'+defaults.idAutocomplete+'" style="display:none"></ul>');
            $elem.attr('autocomplete','off');

            $elem.click(function() {
                validateString();
            });

            $elem.keyup(function(e) {
                validateString();
                if (e.keyCode != 40 && e.keyCode != 38) sayt();
                otherKey(e);
            });

            function validateString(){
                var raw_text =  $('#q').val();
                var return_text = raw_text.replace('<','').replace('>','').replace('=','').replace('?','').replace('&','').replace('"','').replace("'","").replace('[','').replace(']','').replace('/','').replace('(','').replace(')','').replace('{','').replace('}','').replace('%','').replace('#','').replace('@','').replace('*','');
                $('#q').val(return_text);
            }

            function showDefaultValue() {
                if(!$('#q').val().length) {
                    $('#q').val($('#q').attr('data-placeholder'));
                }
            }

            $('html').click(function(e) {
                if (!$(e.target).parents('#gcs').length) {
                    removeAutocomplete();
                    showDefaultValue();
                }
            });
            if (Modernizr.touch) document.addEventListener('touchstart', function(e) { if (!$(e.target).parents('#gcs').length) removeAutocomplete(); });

            var otherKey = function(e) {
                var saytEl = $('#sayt > li > ul'),
                    saytActive = $('#sayt > li > ul.active').length;

                if (e.keyCode === 27 || $elem.val() === '') removeAutocomplete();
                else if (e.keyCode === 40) { //down
                    if(activeItem < saytEl.length-1) activeItem++;
                    saytEl.removeClass('active').eq(activeItem).addClass('active');
                }
                else if (e.keyCode === 38) { //up
                    if(saytActive==0) activeItem=saytEl.length-1;
                    else if(activeItem>0) activeItem--;
                    saytEl.removeClass('active').eq(activeItem).addClass('active');
                }
            };

            var saytMenu = $('#sayt');

            saytMenu.on('mouseover', function(){
                $('#sayt > li > ul').removeClass('active');
                activeItem=-1;
            });

            var sayt = function() {

                var value = $elem.val().toLowerCase(),
                    valueDisplay = $elem.val();

                if($('#q').val().length>2) {
                    $('#'+defaults.idAutocomplete).show();
                    var q = $('#q').val();
                    $.ajax({
                        url: 'http://szukaj.play.pl/quick-search/?q='+q,
                        type: 'get',
                        dataType: 'jsonp',
                        success: function(data){
                            var list = '';
                            $.each(data, function(i){
                                var img = '',
                                    liClass = 'other',
                                    url = data[i].url,
                                    urlAdress = url.split("/"),
                                    urlLength = urlAdress.length,
                                    ifPdf = urlAdress[urlLength-1],
                                    ifPdfLen = ifPdf.length,
                                    pdf2 = ifPdf[ifPdfLen-3]+ifPdf[ifPdfLen-2]+ifPdf[ifPdfLen-1],
                                    pdf = 'pdf',
                                    pdfIco = '';

                                if(data[i].photo!='' && data[i].photo!='undefined' && urlAdress[2]!='www.blogplay.pl' && pdf!=pdf2) {
                                    img = '<li class="first"><img src="'+data[i].photo+'" alt="'+data[i].title+'" onerror="this.parentNode.removeChild(this);" /></li>';
                                    liClass = 'second';
                                } else if(pdf==pdf2) {
                                    pdfIco = '<img src="'+data[i].photo+'" alt="'+data[i].title+'" class="left pdf" />';
                                }

                                list += '<li class="clearfix"><ul data-href="'+data[i].url+'">'+img+'<li class="'+liClass+'"> <a href="'+data[i].url+'" class="link">'+pdfIco+'<span>'+data[i].title+'</span></a> </li></ul></li>';
                            });

                            list += '<li class="search"><ul><li data-href="http://szukaj.play.pl/szukaj?q='+valueDisplay+'&submit="><a href="http://szukaj.play.pl/szukaj?q='+valueDisplay+'&submit=" class="link" title="Wyszukaj '+valueDisplay+'"><span>Wyszukaj '+valueDisplay+'</span><span class="arrow"></span></a></li></ul><div class="cl"></div></li>';

                           $('#'+defaults.idAutocomplete).html(list);
                        }
                    });
                    if(valueDisplay=='SZUKAJ...') {$('.search').hide();} else {$('.search').show();}
                    activeItem = -1;
                }
            };
        };
    } else {
        $.extend(defaults, options);

        var events = function(elem) {
            var $elem = $(elem);
                saytData = null;
            $('#gcs').append('<ul id="'+defaults.idAutocomplete+'" style="display:none"></ul>');
            $elem.attr('autocomplete','off');

            $elem.click(function() { loadData(); });
            $elem.focus(function() {
                if (saytData) sayt();
            });
            $elem.keyup(function(e) {
                if (saytData) sayt();
                otherKey(e);
            });
            $('html').click(function(e) {
                if (!$(e.target).parents('#gcs').length) removeAutocomplete();
            });
            if (Modernizr.touch) document.addEventListener('touchstart', function(e) { if (!$(e.target).parents('#gcs').length) removeAutocomplete(); });

            var loadData = function() {
                var script = document.createElement('script');
                script.setAttribute('src', defaults.dataUrl);
                script.setAttribute('id', 'saytScript');
                if ($('#saytScript').length === 0) document.body.appendChild(script);
            };

            var otherKey = function(e) {
                if (e.keyCode === 27 || $elem.val() === '') removeAutocomplete();
            };

            var sayt = function() {
                var value = $elem.val().toLowerCase(),// Encoder.XSSEncode($elem.val()), .replace(/\</g,'&lt;').replace(/\>/g,'&gt;')
                    valueDisplay = $elem.val();

                var category = saytData.category;
                removeAutocomplete();

                $('#'+defaults.idAutocomplete).show();

                    $.each(category,function(k, v) {
                        function items() {
                            var listItem = '', found = 1;
                            for (var i in v) {
                                if (v.hasOwnProperty(i)) {
                                    var img = '';
                                    if (typeof v[i].i !== 'undefined') img = '<img src="'+v[i].i+'" alt="'+v[i].t+'" width="25" />';
                                    if (found <= defaults.displayItems) {
                                        if (typeof v[i].k !== 'undefined') {
                                            if (v[i].k.toLowerCase().indexOf(value) !== -1){
                                                listItem += '<li>'+img+'<span><a href="'+v[i].a+'" title="'+v[i].t+'" class="linkPointer"><span>'+v[i].t+'</span></a></span><div class="cl"></div></li>';
                                                found++;
                                            }
                                        }
                                    }
                                }
                            }
                            return listItem;
                        }
                        function checkItems() {
                            return (!items()) ? ' style="display:none"' : ' style="display:block"';
                        }
                        $('#'+defaults.idAutocomplete).append(
                            '<li'+checkItems()+'><h3>'+k+'</h3>'+'<ul>'+items()+'</ul></li>'
                        );
                    });

                $('#'+defaults.idAutocomplete).append('<li class="search"><a href="http://szukaj.play.pl/szukaj?q='+valueDisplay+'&submit=" class="linkPointer linkPointerWhite" title="Wyszukaj '+valueDisplay+'"><span>Wyszukaj '+valueDisplay+'</span></a></li>');
                if(valueDisplay=='SZUKAJ...') {$('.search').hide()} else {$('.search').show()}
            };
        };
    }
	var removeAutocomplete = function() {
		$('#'+defaults.idAutocomplete).html('').hide();
	};

	return this.each(function() {events(this);});
};



/* HP */
var hpSlider = (function() {

    var defaults = {
        anim        : false,
        slides      : $('#hpSlider #slides'),
        controls    : $('#hpSlider #controls')
    };

    var init = function() {

        $('a > span', defaults.controls.children()).each(function() {
            var w = $(this).width()+60;
            $(this).css({'width': w+'px', 'padding': '0px'}).append('<span class="line"></span>');
            if (navigator.appVersion.toLowerCase().match(/(msie 7)/) || navigator.appVersion.toLowerCase().match(/(msie 8)/)) $(this).parent().append('<em></em>');
        });

        var isHpList = false;


        var activeLink = $('a.active', defaults.controls.children()),
            activeLinkNr = activeLink.parent().index();

        if($('.hpList').length>0) {
            var hpList = $('.hpList'),
            activeHpList = $('.s'+activeLinkNr);
            hpList.hide();
            if (Modernizr.csstransitions) activeHpList.addClass('show');
            activeHpList.css('opacity', '1').show();
            isHpList = true;
        }

		var hpSliderDark = $('.hpSlider.dark');

		defaults.slides.after('<div class="content"></div>');
		defaults.slides.next().html($('.content', defaults.slides.children().eq(activeLinkNr)).html());

        defaults.slides.children().eq(activeLinkNr).css('visibility', 'visible').addClass('active');
        defaults.slides.next().css({
            'opacity'   : '1',
            'width'     : $('#slides .active .content').css('width')
        });

        for (var i=0; i<activeLinkNr; i++) defaults.slides.children().eq(i).css('left', '-981px');

        $('a', defaults.controls.children()).on('click', function() {
            if($(this).hasClass('active')) return false;

            defaults.slides.children().addClass('transition');
       //     if (!defaults.anim) {
                defaults.anim = true;

                $('a', $(this).parent().siblings()).removeClass('active');
                $(this).addClass('active');

                if(isHpList) {
                    var hpListNr = $(this).parent().index();
                        hpListShow = $('.s'+hpListNr);

                    var newActiveHpList = $('.s'+hpListNr),
                        fadeList = false;
                    if (activeHpList.attr('class') === newActiveHpList.attr('class')) fadeList = true;
                    activeHpList = $('.s'+hpListNr);
                }
                if (Modernizr.csstransitions) {
                    defaults.slides.next().css('opacity', '0');
                    if (!fadeList && isHpList) hpList.css('opacity', '0').hide();
                } else {
                    if (!navigator.appVersion.toLowerCase().match(/(msie 7)/) && !navigator.appVersion.toLowerCase().match(/(msie 8)/)) {
                        defaults.slides.next().fadeOut(300);
                        if (!fadeList && isHpList) hpList.fadeOut(300);
                    } else {
                        defaults.slides.next().hide();
                        if (!fadeList && isHpList) hpList.hide();
                    }
                };

                if ($('html').hasClass('lt-ie9') && isHpList) hpListShow.show();

                var i = $(this).parent().index();
                defaults.slides.children().each(function() {
                    var elem = $(this).index();
                    if (Modernizr.csstransitions) {
                        if (i > elem) $(this).css({'left': '-981px', 'z-index': '50'}).removeClass('active');//.fadeOut(500);
                        else if (i === elem) $(this).css({'left': '0px', 'z-index': '80', 'visibility': 'visible'}).addClass('active');
                        else $(this).css({'left': '981px', 'z-index': '50'}).removeClass('active');//.fadeOut(500);
                    } else {
                        if (i > elem) {
                            $(this).animate({
                                'left'   : '-981px'
                            }, {
                                easing      : 'swing',
                                duration    : 700,
                                queue       : false
                            }).css({'z-index': '50'}).removeClass('active');
                        } else if (i === elem) {
                            $(this).animate({
                                'left'   : '0px'
                            }, {
                                easing      : 'swing',
                                duration    : 700,
                                queue       : false
                            }).css({'z-index': '80', 'visibility': 'visible'}).addClass('active');
                        } else {
                            $(this).animate({
                                'left'   : '981px'
                            }, {
                                easing      : 'swing',
                                duration    : 700,
                                queue       : false
                            }).css({'z-index': '50'}).removeClass('active');
                        };
                    };

                });

				var box = $('.content', defaults.slides.children('.active')).clone();
				if (!Modernizr.csstransitions) {
					if (!navigator.appVersion.toLowerCase().match(/(msie 7)/) && !navigator.appVersion.toLowerCase().match(/(msie 8)/)) box.hide();
				};
				defaults.slides.next().after(box);

                setTimeout(function() {
                    defaults.slides.next().next().css('opacity', '1');
                    if (!fadeList && isHpList) {
                        if (Modernizr.csstransitions) {
                            setTimeout(function() {
                                hpListShow.css('opacity', '1')
                            }, 50);
                        } else if (!navigator.appVersion.toLowerCase().match(/(msie 7)/) && !navigator.appVersion.toLowerCase().match(/(msie 8)/)) hpListShow.css('opacity', '1').fadeIn(300);
                    };
                    if (Modernizr.csstransitions) {
                        defaults.slides.next().next().addClass('show');
                        if (fadeList == false && isHpList) hpListShow.addClass('show').siblings('ul').removeClass('show');
                    } else {
                        if (!navigator.appVersion.toLowerCase().match(/(msie 7)/) && !navigator.appVersion.toLowerCase().match(/(msie 8)/)) defaults.slides.next().next().fadeIn(700);
                    };
                }, 600);

                setTimeout(function() {
                    defaults.anim = false;
                    defaults.slides.children().not('.active').css({'visibility': 'hidden'});
                    defaults.slides.next().remove();
                    defaults.slides.next().removeClass('show');
                    if (Modernizr.csstransitions && isHpList) activeHpList.addClass('show');
                }, 700);

          //  };

            return false
        });

    };

    return {
        init        : init
    }
})();

/* FIXES */
$.fn.ielinkPointer = function() {
    if( $.browser.msie && parseFloat($.browser.version) === 7){

        var fixLink = function(a) {
            var lh = parseFloat($(a).css('line-height')), h = parseFloat($(a).css('height'));
            lh = parseInt(Math.ceil(lh), 10) + 4;
            if (lh < h) {
                var img = '<img src="_img/_section/linkPointer.png" />';
                if ($(a).hasClass('big')) img = '<img src="_img/_section/linkPointerBig.png" />';
                if ($(a).hasClass('big'))
                $(a).addClass('nobg').append(img).find('span').css('zoom', '');
                a.style.zoom = null;
            }
        };

        return this.each(function() { fixLink(this); });
    }
    return this;
};

function equalHeight(left, right, loaded) {

    loaded = loaded || false;
    var equality = function() {
        if (left.length === 1 && right !== undefined) {
            var l = left.height(), r = right.height();
            if (l!==r) (l > r) ? right.height(l+'px') : left.height(r+'px');
        } else if (left.length > 1) {
            var h = [];
            left.css('height', 'auto');
            left.each(function() { h.push($(this).height()); });
            h.sort(function(a,b) { return b-a; } );
            left.css('height', h[0]+'px');
        }
    }

    equality();
    if (!loaded) {
        $(window).load(function() {
            equality();
        });
    } else equality();
}

$.fn.selecTable = function() {

	var init = function(elem) {
        $(elem).addClass('selecTable');
        var index = $('input[type=radio]:checked', elem).parents('th').index()+1;
        $(elem).find('th:nth-child('+index+'), td:nth-child('+index+')').addClass('selected');
	};

    var events = function(elem) {
        $('th, td', elem).not('.dummy, :nth-child(2)').addClass('selectable');

        $('th, td', elem).not('.dummy, :nth-child(2)').hover(function() {

            var index = $(this).index()+1;
            $(this).parents('table').find('th:nth-child('+index+'), td:nth-child('+index+')').addClass('hover');

        }, function() {

            var index = $(this).index()+1;
            $(this).parents('table').find('th:nth-child('+index+'), td:nth-child('+index+')').removeClass('hover');

        });

        $('th, td', elem).not('.dummy, :nth-child(2)').click(function() {

            var index = $(this).index()+1;
            $(this).parents('table').find('th:nth-child('+index+') input').attr('checked', true);
            $(this).parents('table').find('th .styleRadio').removeClass('checked');
            $(this).parents('table').find('th:nth-child('+index+') .styleRadio').addClass('checked');

            $(this).parents('table').find('th, td').removeClass('selected');
            $(this).parents('table').find('th:nth-child('+index+'), td:nth-child('+index+')').addClass('selected');

        });

    };
    return this.each(function() { init(this); events(this); } );
};

$.fn.tableScroll = function(options) {

    var defaults = {
        size    : 2,
        min     : 0,
        max     : 0,
        scroll  : true
    };

    jQuery.extend(defaults, options);

	var init = function(elem) {
        $(elem).wrap('<div class="tableScrollOverlay" />');
        options.max = $(elem).height()+29;
        options.min = $('thead tr', elem).height()+29;
        $('tbody tr', elem).each(function() {
            if ($(this).index() < options.size) options.min += $(this).height();
        });
        $(elem).parent().css({
            'height'    : options.min+'px',
            '-moz-transition'       : 'height '+(options.max/1000)+'s',
            '-webkit-transition'    : 'height '+(options.max/1000)+'s',
            '-o-transition'         : 'height '+(options.max/1000)+'s',
            'transition'            : 'height '+(options.max/1000)+'s'
        });

        var scroll = $('<a href="#" class="tableScroll" />').html('Rozwiń szczegóły abonamentu<em></em>');

        scroll.click(function() {
            var h = (scroll) ? options.max : options.min;
            (scroll) ? $(elem).next().html('Zwiń szczegóły abonamentu<em></em>') : $(elem).next().html('Rozwiń szczegóły abonamentu<em></em>');
            $(elem).next().toggleClass('up');
            scroll = !scroll;

            if (Modernizr.cssanimations) $(elem).parent().css({'height': h+'px'});
            else {
                $(elem).parent().animate({
                    'height'    : h+'px'
                }, {
                    easing      : 'swing',
                    duration    : options.max,
                    queue       : false,
                    complete    : function() {}
                });
            }
            return false
        });
        $(elem).after(scroll);
	};

    var events = function(elem) {

    };
    return this.each(function() { init(this); events(this); } );
};

$.fn.tabs = function(options) {

    var defaults = {
        tab         : 'false',
        content     : 'false',
        activeClass : 'active',
        isHref      : true,
        start       : function() {},
        callback    : function() {}
    };

    jQuery.extend(defaults, options);

    var init = function(elem) {
                if ($(elem).find('.active').length==0) {
                        $(defaults.content+' > *').not(':first-child').hide();
                        $(elem).find(defaults.tab+':first').addClass('active');
                } else {
                        $(defaults.content+' > *').hide();
                        var t = $(elem).find('.active');
                        var newTab = defaults.isHref ? $(t).attr('href').split('/') : $(t).attr('data-href').split('/');
                        newTab = newTab[newTab.length-1];
                $(defaults.content+' > *[data-tab='+newTab+']').show();
                if ($('#fancybox-wrap:visible').length) $(window).resize();
                }
            defaults.start();
        };


    var events = function(elem) {
        $(elem).find(defaults.isHref ? defaults.tab : defaults.tab+'[data-href]').on('click', function() {

            $(elem).find(defaults.tab).removeClass(defaults.activeClass);
            $(this).addClass(defaults.activeClass);
            $(defaults.content+' > *').hide();

            var newTab = defaults.isHref ? $(this).attr('href').split('/') : $(this).attr('data-href').split('/');
            newTab = newTab[newTab.length-1];
            $(defaults.content+' > *[data-tab='+newTab+']').show();
            if ($('#fancybox-wrap:visible').length) $(window).resize();
            defaults.callback();
            return false;
        });
    };
    return this.each(function() { init(this); events(this); } );
};

var hasTouch = Modernizr.touch;

jQuery.fn.customSlider = function(options){
    var defaults = {
        type					: 'step',
        block					: false,
        blockRelated            : [],
        sliderSteps 			: [],
        classes: {
            sliderContainer: 		'sliderContainer',
            sliderActiveTrack: 		'sliderActiveTrack',
            sliderTrack: 			'sliderTrack',
            sliderHandle: 			'sliderHandle',
            sliderTarget: 			'sliderTarget',
            sliderEnd: 		    	'sliderEnd',
            sliderTooltip: 			'sliderTooltip',
            sliderTooltipL:         'tooltipLeft',
            sliderTooltipR:         'tooltipRight',
            sliderTooltipTriangle:  'triangle',
            sliderTooltipValue:     'val',
            sliderInput:			'sliderInput',
            active:					'active',
            activePrev:				'activePrev',
            blockSlider:			'blockSlider',
            overlay:			    'sliderOverlay'
        },
        lang : 'pl',
        texts : {
            pl: {
                titleClickToBlock : 'Kliknij aby zablokować',
                titleClickToUnBlock : 'Kliknij aby odblokować'
            }
        },
        callback: {
            onDrag 				: function() {},
            onDrop 				: function(v) {},
            onKeyUp             : function() {},
            onBlock				: function() {},
            block				: function() {},
            ready               : function() {}
        },
        animation: {
            speed				: 400,
            effect 				: 'easeOutCubic'
        },
        value: {
            min					: 0,
            max					: 100,
            showMin				: false,
            showMax				: false,
            progress            : true,
            labels              : true
        },
        correct: {
            trackMargin			: 20,
            handle				: 11
        },
        input: {
            display: 'none',
            width: '100px',
            label: '',
            readonly: true,
            tooltip: false,
            maxlength: false
        }
    };

    var _THIS = this;

    var options = jQuery.extend(true, {}, defaults, options);

    var init = function (i, elem) {
        var $this = jQuery(elem);
        $this.data('slider', 'true');

        var $thisRadios = $this.find('input[type="radio"]'),
            html = 	'<ul class="'+ options.classes.sliderContainer +' '+ options.type +' progress_'+ options.value.progress +'">' +
                        '<li class="'+ options.classes.sliderTrack +'"><span class="'+ options.classes.sliderActiveTrack +'"></span></li>' +
                        '<li class="'+ options.classes.sliderHandle +'"></li>' +
                    '</ul>';

            $this.append(html);
            if (!options.value.labels) $this.find('label').remove();


            var $thisSliderContainer 	= $this.find('div.' + options.classes.sliderContainer),
                $thisSliderHandle		= $this.find('span.' + options.classes.sliderHandle),
                $thisSliderTrack 		= $this.find('span.' + options.classes.sliderTrack),
                $thisSliderActiveTrack 	= $this.find('span.' + options.classes.sliderActiveTrack),

                html = '',
                additionalHtml = '';

                $thisSliderTrack.width($thisSliderContainer.width() - options.correct.trackMargin).css('left', options.correct.trackMargin / 2);
                //$thisSliderActiveTrack.css('left', options.correct.trackMargin / 2);

            if (options.type === 'default') {
                    var additionalHtml = '<label class="'+ options.classes.sliderInput +'" style="display:'+options.input.display+';"><input type="text" class="text" style="display:'+options.input.display+';width:'+options.input.width+';" data-value="'+options.value.min+'" value="'+seperate(options.value.min)+'"> '+ options.input.label +'</label>';

                        $thisSliderContainer.after(additionalHtml);
                        $thisSliderHandle.css({'left':0});

                    var $thisLabel = $this.find('label.'+ options.classes.sliderInput.replace(/ /gi, '.')),
                        $thisInput = $thisLabel.children('input[type=text]');

                        $thisInput.keydown(function(e) {
                            var $this = jQuery(this),
                                $thisValue = unseperate($this.val());

                            if (window.event) keycode = window.event.keyCode;
                            else if (e) keycode = e.which;

                            if (keycode === 38) {
                                $thisValue = Number($thisValue) + 1;
                                if (validateValue($thisValue)) $this.val(seperate($thisValue)).data('value', $thisValue);
                            };

                            if (keycode === 40) {
                                $thisValue = Number($thisValue) - 1;
                                if (validateValue($thisValue)) $this.val(seperate($thisValue)).data('value', $thisValue);
                            };

                            var eventX = ($thisSliderTrack.width() / (options.value.max - options.value.min)) * ($thisValue - options.value.min);

                            moveSlider($thisSliderContainer, $thisSliderHandle, eventX, true, true);
                        });

                        $thisInput.keyup(function(e) {
                            var $this = jQuery(this),
                                $thisValue = unseperate($this.val()),
                                eventX = ($thisSliderTrack.width() / (options.value.max - options.value.min)) * ($thisValue - options.value.min);

                            moveSlider($thisSliderContainer, $thisSliderHandle, eventX, true, true);
                            $this.val(seperate($thisValue)).data('value', $thisValue);
                            options.callback.onKeyUp();
                        });

                        if (options.input.readonly) $thisInput.attr('readonly','readonly');
                        if (options.input.maxlength != false) $thisInput.attr('maxlength',options.input.maxlength);

                        if (options.input.tooltip) {
                            var additionalHtml = '<li class="'+ options.classes.sliderTooltip +'"><span class="'+ options.classes.sliderTooltipTriangle +'"></span><span class="'+ options.classes.sliderTooltipL +'"><span class="'+ options.classes.sliderTooltipValue +'">'+ seperate(options.value.min) +'</span> '+ options.input.label +'<span class="'+ options.classes.sliderTooltipR +'"></span></span></li>';

                                $thisSliderContainer.prepend(additionalHtml);
                                $thisLabel.hide();

                            var $thisSliderTooltip = $this.find('li.' + options.classes.sliderTooltip);
                        }
            }

            if (options.block) {
                var additionalHtml = '<label class="'+ options.classes.blockSlider +'" for="'+elem.id+'Input"><input type="checkbox" value="" id="'+elem.id+'Input" title="'+ options.texts[options.lang].titleClickToBlock +'" name="'+elem.id+'Input"></label>';

                    $thisSliderContainer.after(additionalHtml);
                    $thisSliderContainer.prevAll('h3').append('<span class="info" style="display: none;">zablokowane</span>');

                var $thisLabelCheckbox = $this.find('label.'+ options.classes.blockSlider),
                    $thisInputCheckbox = $thisLabelCheckbox.children('input[type=checkbox]');
                    $thisInputCheckbox.click(function() {
                        var $this = jQuery(this),
                            allow = true;

                        if (allow) {

                            if (isChecked($this)) {
                                $thisSliderContainer.unbind('mousedown');

                                if (typeof window.ontouchstart != undefined) {
                                    $thisSliderContainer[0].ontouchstart = function () {}
                                }

                                $thisInputCheckbox.attr('title',options.texts[options.lang].titleClickToUnBlock);

                                $thisInput.attr('disabled','disabled').addClass('disabled');
                                $thisSliderContainer.prevAll('h3').find('.info').show();

                                for (i = 0; i < options.blockRelated.length; i++) options.blockRelated[i].find('.blockSlider input').attr({'disabled': 'disabled', 'title': 'Nie można blokować dwóch suwaków jednocześnie'}).prev().error('Nie można blokować dwóch suwaków jednocześnie', 'refresh');

                            } else {
                                $thisSliderContainer.bind('mousedown', function(e) {
                                    events.mousedown(e, jQuery(this));
                                });

                                if (typeof window.ontouchstart != undefined) {
                                    $thisSliderContainer[0].ontouchstart = function(e) {
                                        events.touchstart(e, jQuery(this));
                                    };
                                }

                                $thisInputCheckbox.attr('title',options.texts[options.lang].titleClickToBlock)

                                $thisInput.removeAttr('disabled').removeClass('disabled');
                                $thisSliderContainer.prevAll('h3').find('.info').hide();

                                for (i = 0; i < options.blockRelated.length; i++) options.blockRelated[i].find('.blockSlider input').removeAttr('disabled').attr('title', options.texts[options.lang].titleClickToBlock).prev().error(options.texts[options.lang].titleClickToBlock, 'refresh');
                            }

                            options.callback.onBlock();

                        }
                    });
                options.callback.block;
            }

            if (options.value.showMin === true) {
                var additionalHtml = '<span class="showMin">'+ seperate(options.value.min) +' '+ options.input.label +'</span>';
                $thisSliderContainer.before(additionalHtml);
            }

            if (options.value.showMax === true) {
                var additionalHtml = '<span class="showMax">'+ seperate(options.value.max) +' '+ options.input.label +'</span>';
                $thisSliderContainer.after(additionalHtml);
            }

            if (!options.sliderSteps.length) {
                var stepWidth = ($thisSliderContainer.width() / Number($thisRadios.length - 1)) - ($thisSliderHandle.width()/Number($thisRadios.length - 1)),
                    cssClass = '';

                for (var i=0; i < $thisRadios.length; i++) {
                    options.sliderSteps[options.sliderSteps.length] = i * stepWidth;
                    cssClass = (i === $thisRadios.length - 1) ? ' lastChild' : '';
                    html += '<li class="'+ options.classes.sliderTarget +' '+ options.classes.sliderTarget + i + cssClass +'" style="left:'+ options.sliderSteps[i] +'px" data-val="'+ $thisRadios.eq(i).val() +'"><div class="sliderLabel">'+ $thisRadios.eq(i).parent('label').text() +'</div></li>';
                }
            } else {
                for (var i=0; i < $thisRadios.length; i++) {
                    html += '<li class="'+ options.classes.sliderTarget +' '+ options.classes.sliderTarget + i + '" style="left:'+ options.sliderSteps[i] +'px" data-val="'+ $thisRadios.eq(i).val() +'">'+ $thisRadios.eq(i).parent('label').text() +'</li>';
                }
            }
            html += '<li class="'+ options.classes.sliderEnd +' left"></li>';
            html += '<li class="'+ options.classes.sliderEnd +' right"></li>';


            $thisSliderContainer.append(html);
            $thisSliderContainer.find('.sliderTarget' + $thisSliderContainer.parent().find('input:checked').index()).addClass('active');

            if (!options.value.progress)
                $thisSliderActiveTrack.hide();

            if (typeof window.ontouchstart == 'undefined') {
                $thisSliderContainer.mousedown(function(e) {
                    events.mousedown(e, jQuery(this));
                });
            }

            $thisRadios.each(function(id, elem) {
                var $this = jQuery(elem);

                    x = options.sliderSteps[id];
                    $this.bind('click', {'container': $thisSliderContainer, 'handle': $thisSliderHandle, 'radio': $thisRadios, 'targetX': x, 'anim': false, 'correct': 8}, events.click);
            });

            /* touch evets */
            if (typeof window.ontouchstart != undefined) {
                $thisSliderContainer[0].ontouchstart = function(e) {
                    events.touchstart(e, jQuery(this));
                }
            }

            // if ($('html').hasClass('csstransforms')) $thisSliderActiveTrack.css({'width': '1px'});
            $(elem).find(':checked').click();
            options.callback.ready();
    };

    var events = {
        drag: function(e) {
            var $this = jQuery(e.data.container),
                offset = $this.offset();

                bounds = {
                    'left'	: offset.left,
                    'right'	: offset.left + $this.width(),
                    'top'	: offset.top,
                    'bottom': offset.top + $this.height()
                };

            moveSlider($this, e.data.handle, e.pageX - offset.left - options.correct.handle);

            options.callback.onDrag();
        },

        drop: function(e, touchDropX) {
            var $this = jQuery(e.data.container),
                offset = $this.offset(),

                dropX = (e.data.targetX !== undefined) ? e.data.targetX : e.pageX - offset.left,
                dropX = (isNaN(dropX) && hasTouch) ? touchDropX  - offset.left : dropX,
                step = closestStep(dropX, options.sliderSteps),

                $thisSliderActiveTarget = $this.find('li.' + options.classes.sliderTarget).eq(step),

                targetX = options.sliderSteps[step];

            //events.transition($('ul.' + options.classes.sliderContainer), true);
            if (options.type === 'default')	moveSlider($this, e.data.handle, dropX - options.correct.handle, true);
            else moveSlider($this, e.data.handle, targetX, true);

            //setTimeout(function() { events.transition($('ul.' + options.classes.sliderContainer), false); }, options.animation.speed);

            e.data.radio.filter('[value="'+ $thisSliderActiveTarget.attr('data-val') +'"]').attr('checked', true);

            jQuery('body').unbind('mousemove', events.drag);
            jQuery('body').unbind('mouseup', events.drop);

            jQuery('.'+options.classes.overlay).remove();
            options.callback.onDrop($thisSliderActiveTarget.attr('data-val'));
            return false;
        },

        mousedown: function(e, $this) {
            var $thisSliderHandle = $this.find('li.' + options.classes.sliderHandle),
                $thisRadios = $this.parent().find('input[type="radio"]');

                jQuery('body')
                    .bind('mousemove', { 'container': $this, 'handle': $thisSliderHandle, 'radio': $thisRadios }, events.drag)
                    .bind('mouseup', { 'container': $this, 'handle': $thisSliderHandle, 'radio': $thisRadios }, events.drop);
                jQuery('body').prepend('<div class="'+options.classes.overlay+'" style="width: '+jQuery(document).width()+'px; height: '+jQuery(document).height()+'px;"></div>');
                e.preventDefault();
        },

        click: function(e) {
            events.drop(e);
        },

        touchstart: function(e, $this) {
            var $thisSliderHandle = $this.find('li.' + options.classes.sliderHandle),
                $thisRadios = $this.parent().find('input[type="radio"]'),
                touchDropX = 0,
                start = !!1;

                moveSlider($this, $thisSliderHandle, e.touches[0].pageX - $this.offset().left - options.correct.handle);

                document.body.ontouchmove = function(e) {
                    var offset = $this.offset();

                        touchDropX = e.touches[0].pageX;

                        bounds = {
                            'left'	: offset.left,
                            'right'	: offset.left + $this.width(),
                            'top'	: offset.top,
                            'bottom': offset.top + $this.height()
                        };

                    moveSlider($this, $thisSliderHandle, e.touches[0].pageX - offset.left - options.correct.handle);

                    options.callback.onDrag();
                    e.preventDefault();
                };

                jQuery('body').on("touchend", { 'container': $this, 'handle': $thisSliderHandle, 'radio': $thisRadios },  function(e) {
                    if (start)
                        events.drop(e, touchDropX);

                    document.body.ontouchmove = function(e) {}

                    start = !1;
                });

                jQuery('body').on("touchcancel", { 'container': $this, 'handle': $thisSliderHandle, 'radio': $thisRadios },  function(e) {
                    events.drop(e, touchDropX);
                });

                e.preventDefault();
        }

        // transition: function($this, add) {
        //     if ($('html').hasClass('csstransforms') && !$.browser.msie) {
        //
        //         var $thisSliderHandle       = $this.find('li.' + options.classes.sliderHandle),
        //             $thisSliderActiveTrack 	= $this.find('span.' + options.classes.sliderActiveTrack),
        //             $thisSliderTooltip      = $this.find('li.' + options.classes.sliderTooltip);
        //
        //         if (add) {
        //             $thisSliderActiveTrack.css({
        //                 '-moz-transition': '-moz-transform '+options.animation.speed/1000+'s',
        //                 '-webkit-transition': '-webkit-transform '+options.animation.speed/1000+'s',
        //                 '-o-transition': '-o-transform '+options.animation.speed/1000+'s'
        //             });
        //             $thisSliderHandle.css({
        //                 '-moz-transition': '-moz-transform '+options.animation.speed/1000+'s',
        //                 '-webkit-transition': '-webkit-transform '+options.animation.speed/1000+'s',
        //                 '-o-transition': '-o-transform '+options.animation.speed/1000+'s'
        //             });
        //             if (options.input.tooltip) {
        //                 $thisSliderTooltip.css({
        //                     '-moz-transition': '-moz-transform '+options.animation.speed/1000+'s',
        //                     '-webkit-transition': '-webkit-transform '+options.animation.speed/1000+'s',
        //                     '-o-transition': '-o-transform '+options.animation.speed/1000+'s'
        //                 });
        //             }
        //         } else {
        //             $thisSliderActiveTrack.css({
        //                 '-moz-transition': 'none',
        //                 '-webkit-transition': 'none',
        //                 '-o-transition': 'all 0'
        //             });
        //             $thisSliderHandle.css({
        //                 '-moz-transition': 'none',
        //                 '-webkit-transition': 'none',
        //                 '-o-transition': 'all 0'
        //             });
        //             if (options.input.tooltip) {
        //                 $thisSliderTooltip.css({
        //                     '-moz-transition': 'none',
        //                     '-webkit-transition': 'none',
        //                     '-o-transition': 'all 0'
        //                 });
        //             }
        //         }
        //
        //     }
        // }
    };

    var moveSlider = function ($this, sliderHandle, eventX, isAnimated, keypress) {

        var newX = eventX,
            step = closestStep(newX, options.sliderSteps),

            $thisSliderHandle		= $this.find('span.' + options.classes.sliderHandle),
            $thisSliderTrack 		= $this.find('span.' + options.classes.sliderTrack),
            $thisSliderActiveTrack  = $this.find('span.' + options.classes.sliderActiveTrack),
            $thisSliderActiveTarget = $this.find('span.' + options.classes.sliderTarget).eq(step),
            $thisSliderTarget  		= $this.find('span.' + options.classes.sliderTarget),
            $thisSliderTooltip  	= $this.find('span.' + options.classes.sliderTooltip),

            isAnimated = isAnimated || false;

            newX = Math.max(options.sliderSteps[step], 0);
            newX = Math.min(newX, $this.width() - $thisSliderHandle.width());
            // if ($('html').hasClass('csstransforms')  && !$.browser.msie) {
            //     $thisSliderHandle[0].style.MozTransform = 'translateX('+Math.floor(newX)+'px)';
            //     $thisSliderHandle[0].style.WebkitTransform = 'translateX('+Math.floor(newX)+'px)';
            //     $thisSliderHandle[0].style.OTransform = 'translateX('+Math.floor(newX)+'px)';
            //
            //     if (options.input.tooltip) $thisSliderTooltip[0].style.MozTransform = 'translateX('+(Math.floor(newX))+'px)';
            //     if (options.input.tooltip) $thisSliderTooltip[0].style.WebkitTransform = 'translateX('+(Math.floor(newX))+'px)';
            //     if (options.input.tooltip) $thisSliderTooltip[0].style.OTransform = 'translateX('+(Math.floor(newX))+'px)';
            //
            //     $thisSliderActiveTrack[0].style.MozTransform = 'translateX('+((Math.floor(newX-1) / 2))+'px) scaleX('+(Math.floor(newX+10))+')';
            //     $thisSliderActiveTrack[0].style.WebkitTransform = 'translateX('+((Math.floor(newX-1) / 2))+'px) scaleX('+(Math.floor(newX+10))+')';
            //     $thisSliderActiveTrack[0].style.OTransform = 'translateX('+((Math.floor(newX-1) / 2))+'px) scaleX('+(Math.floor(newX+10))+')';
            //     /*
            //     $thisSliderHandle.css({
            //         'MozTransform': 'translateX('+Math.floor(newX)+'px)',
            //         'WebkitTransform': 'translateX('+Math.floor(newX)+'px)'
            //     });
            //     $thisSliderTooltip.css({
            //         'MozTransform': 'translateX('+(Math.floor(newX))+'px)',
            //         'WebkitTransform': 'translateX('+(Math.floor(newX))+'px)'
            //     });
            //     $thisSliderActiveTrack.css({
            //         'MozTransform': 'translateX('+((Math.floor(newX) / 2))+'px) scaleX('+(Math.floor(newX))+')',
            //         'WebkitTransform': 'translateX('+((Math.floor(newX) / 2))+'px) scaleX('+(Math.floor(newX))+')'
            //     });
            //     */
            // } else {
                /*if (isAnimated) {
                    $thisSliderHandle.stop(false, true).animate(
                        {'left': newX},
                        {'duration': options.animation.speed,
                         'easing': options.animation.effect});

                    $thisSliderActiveTrack.stop(false, true).animate(
                        {'width': newX},
                        {'duration': options.animation.speed,
                         'easing': options.animation.effect});
                    $thisSliderTooltip.stop(false, true).animate(
                        {'left': newX-200},
                        {'duration': options.animation.speed,
                         'easing': options.animation.effect});
                } else {*/
                    $thisSliderHandle.css({'left': newX});
                    $thisSliderActiveTrack.css({'width': newX});
                    $thisSliderTooltip.css({'left': newX-200});
                // }
            // }

            if (options.type === 'default') {
                var value = Math.floor((newX) / ($thisSliderTrack.width() / (options.value.max - options.value.min)) + options.value.min);

                if (value <= options.value.min) var value = options.value.min;
                else if (value >= options.value.max) var value = options.value.max;

                if (!keypress) $thisSliderTrack.parent('ul').nextAll('label').find('input').val(seperate(value)).data('value', value);
                if (options.input.tooltip) $thisSliderTooltip.find('span.'+options.classes.sliderTooltipValue).html(seperate(value));

                if(value === 0) {
                    $thisSliderTrack.parent('ul').nextAll('label').find('input').val('-').data('value', value);
                    $thisSliderActiveTarget.addClass(options.classes.active);
                } else {
                    $thisSliderTarget.removeClass(options.classes.active);
                }
            }

            if (options.type === 'step') {
                $thisSliderTarget.removeClass(options.classes.active);
                $thisSliderActiveTarget.addClass(options.classes.active);
            }

            $this.children('li.'+options.classes.sliderTarget+'.'+options.classes.active).prevAll('li.'+options.classes.sliderTarget).addClass(options.classes.activePrev);
            $this.children('li.'+options.classes.sliderTarget+'.'+options.classes.active).nextAll('li.'+options.classes.sliderTarget).removeClass(options.classes.activePrev);
    };

    var validateValue = function($thisValue) {
        return $thisValue >= options.value.min && $thisValue <= options.value.max;
    };

    var isChecked = function($this) {
        if ($this.is(':checked')) return true;
        else return false;
    };

    var closestStep = function (pos, steps) {
        var steps_len = steps.length-1,
            i = 0;

        while (i < steps_len && pos > steps[i])
            i++;
        if (i > 0) {
            var distNext = steps[i] - pos,
                distPrev = pos - steps[i-1];
            if (distPrev < distNext)
                return i-1;
        }
        return i;
    };

    return this.each(function(i) {
        if ($(this).data('slider') !== 'true') init(i, this);
    });
};

function scrollUp() {
    if (!$('#scrollUp').length) {
        var scroll = $('<a id="scrollUp" href="#" />');
        scroll.text("Przewiń do góry");
        $('body').append(scroll);

        if($('html').hasClass('lt-ie10')) { scroll.hide(); }
        else { scroll.css({'right': '0'}); }

        var to = '';
        var scrollToTop = function() {
            var s = (document.documentElement.scrollTop > 0) ? document.documentElement.scrollTop : document.body.scrollTop;
            if (s > 0) {
                if (Modernizr.cssanimations) {
                    scroll.css({'opacity': '1', 'right': '0px'});
                    clearTimeout(to);
                } else scroll.show().css({'opacity': '1'});
            } else {
                if (Modernizr.cssanimations) {
                    scroll.css({'opacity': '0'});
                    to = setTimeout(function() {
                        scroll.css({'right': '0'});
                    }, 400);
                } else scroll.hide().css({'opacity': '1'});
            }
        };

        var visibility = function() {
            if ($(window).width() < 1024) scroll.addClass('hidden');
            else scroll.removeClass('hidden');
        }; visibility();

        $(window).scroll(function() {
            scrollToTop();
        });
        $(window).resize(function() {
            visibility();
        });

        scroll.on('click', function() {
            //$.scrollTo(0, 400);
            $('html, body').animate({scrollTop: 0}, 400);
            return false
        });
    }
}


/* basket box */
function basketBox(context, cw) {
    if ($(context + ' .chooseSection.auto').length) {

        /* equal width */
        $(context + ' .chooseSection').each(function() {
            var w = cw - $('ul:first li', this).size() + 1;
                single = Math.floor(w / $('ul:first li', this).size()),
                rest = w - (single * $('ul:first li', this).size());

            $('ul:first li', this).not(':last').css('width', single+'px');
            $('ul:first li:last', this).css('width', (rest+single)+'px');

            /* modify single box */
            if ($('ul:first li', this).length == 1) {
                $(this).addClass('single');
                $('ul:first li > span:last-child', this).remove();
            }
        });



        if (!Modernizr.touch) {
            $(context + ' .chooseSection li').hover(function(e){
                var that = $(this),
                    desc = $(this).parents('.chooseSection').find('.chooseDesc');

                if(e.type === 'mouseenter'){
                    that.parent().find('.active').removeClass('active')
                        .end().end().addClass('active');
                    desc.find('p').hide().eq( that.index() ).show();
                } else if (e.type === 'mouseleave'){
                    that.parent().find('.active').removeClass('active')
                        .end().find('span.checked').parents('li').addClass('active');

                    desc.find('p').hide().filter('.active').show();
                }
            });
        }
        $(context + ' .chooseSection li input').on('change', function(){
            var that = $(this).parents('li'),
                desc = $(this).parents('.chooseSection').find('.chooseDesc'),
                numOpt = $(context + ' .numberOptions'),
                price = parseInt(that.find('.txt .pink').text());

                that.parent().find('.active').removeClass('active')
                    .end().end().addClass('active');
                desc.find('p').hide().removeClass('active').eq( that.index() ).show().addClass('active');

                // wybierz opcje wyboru numeru
                numOpt.find('li').hide();
                if(that.hasClass('showTypeNumber')){
                    numOpt.find('.typeNumber').show();
                } else if(that.hasClass('showSelectNumber')){
                    numOpt.find('.selectNumber').show();
                }

                // przerzuc cene
                $(context + ' .replacePrice').html(price + '<small>zł</small>');
        });

        // po odswiezeniu zaznacz
        $(context + ' .chooseSection li input').each(function(){
            if($(this).is(':checked')){
                $(this).parents('li').trigger('click')
            }
        });
    }
}

$.fn.counter = function(options) {

    var defaults = {
        date        : [1989, 12, 21, 0, 0, 0],
        count       : {
            days        : true,
            hours       : true,
            mins        : true,
            secs        : true
        },
        labels      : {
            days        : 'Dni',
            hours       : 'Godziny',
            mins        : 'Minuty',
            secs        : 'Sekundy'
        },
        showLabels  : false,
        callbacks   : {
            onEnd       : function() {}
        }
    };

    var options = jQuery.extend(true, {}, defaults, options);

    var $counter    = $('<ul class="counter clearfix"></ul>'),
        today       = new Date(),
        to          = new Date(options.date[0], options.date[1]-1, options.date[2], options.date[3], options.date[4], options.date[5]),
        interval    = function() {},
        timer       = {},
        period      = {
            day         : 86400000,
            hour        : 3600000,
            minute      : 60000,
            sec         : 1000
        };

    var twoDigits = function(i) {
        if (i < 10) return '0'+i;
        else return i;
    };

    var objectLength = function(obj) {
        var count = 0;
        for (k in obj) if (obj.hasOwnProperty(k)) count++;
        return count;
    };

    var init = function(elem) {
        var i = 0;
        for (var k in options.labels) {
            var l = objectLength(options.labels)-i;
            $counter.append('<li class="'+k+'" '+((options.count[k]) ? '' : 'style="display:none;"')+'><span class="count">'+((l > 3) ? '0' : '00')+'</span>'+((options.showLabels) ? ' <span class="label">'+options.labels[k]+'</span>' : '')+'</li>');
            i++;
        };
        $(elem).append($counter);
        count();
    };

    var count = function() {
        today = new Date();
        left = to - today;

        if (left <= 0) {
            clearInterval(interval);
            options.callbacks.onEnd();

            return false;
        };

        /* days left */
        timer.days = Math.floor(left / period.day);
        left -= timer.days * period.day;

        /* hours left */
        timer.hours = Math.floor(left / period.hour);
        left -= timer.hours * period.hour;
        timer.hours = twoDigits(timer.hours);

        /* mins left */
        timer.mins = Math.floor(left / period.minute);
        left -= timer.mins * period.minute;
        timer.mins = twoDigits(timer.mins);

        /* secs left */
        timer.secs = Math.floor(left / period.sec);
        left -= timer.secs * period.sec;
        timer.secs = twoDigits(timer.secs);

        for (var k in timer) $counter.find('.'+k+' .count').text(timer[k]);

        interval = setTimeout(count, 1000);
    };

    return this.each(function() { init(this); } );
};

$.fn.coverflow = function(options) {

    var defaults = {
        gap     : 20,
        start   : 'center'
    };

    var options = jQuery.extend(true, {}, defaults, options);

    var position = function(li) {
        var active = $(li).siblings('.active').index();
        if (active === -1) active = $(li).index();
        var position = ($(li).parents('div').width()/2)-($(li).outerWidth()/2)+($(li).index()*$(li).outerWidth())-($(li).index()*($(li).outerWidth()/2));
        position -= active*($(li).outerWidth()/2);

        if ($(li).index() < active) position -= 50;
        else if ($(li).index() > active) position += 50;

        return position;
    };
    var tilt = function(li) {
        var active = $(li).siblings('.active').index();
        if (active === -1) active = $(li).index();
        var mod = Math.abs(active-$(li).index())*3;
        if (mod > 12) mod = 12;

        if ($(li).hasClass('active')) return 0;
        else if ($(li).nextAll('.active').length) return (64-mod); //52
        else if ($(li).prevAll('.active').length) return -(64-mod);
    };
    var scale = function(li) {
        if ($(li).hasClass('active')) return 1;
        else return 0.9;
    };
    var alpha = function(li) {
        if ($(li).hasClass('active')) return 1;
        else return 0.95;
    };

    var positionStatic = function(li) {
        var active = $(li).siblings('.active').index();
        if (active === -1) active = $(li).index();
        var position = ($(li).parents('div').width()/2)-($(li).outerWidth()/2)+($(li).index()*$(li).outerWidth())-($(li).index()*($(li).outerWidth()/3));
        position -= active*($(li).outerWidth()/1.5);

        if ($(li).index() < active) position -= 50;
        else if ($(li).index() > active) position += 50;

        return position;
    };
    var resize = function(li) {
        if ($(li).hasClass('active')) return false;
        else return true;
    };

    var start = function(elem) {

        if (Modernizr.csstransforms3d) {
            $(elem).find('li').each(function() {

                $(this).css({
                    'transform'         : 'translate3d('+(($(this).parents('div').width()/2)-($(this).outerWidth()/2))+'px, 0px, 0px) perspective(600px) rotateY(0deg) scaleY(1)',
                    '-o-transform'      : 'translate3d('+(($(this).parents('div').width()/2)-($(this).outerWidth()/2))+'px, 0px, 0px) perspective(600px) rotateY(0deg) scaleY(1)',
                    '-moz-transform'    : 'translate3d('+(($(this).parents('div').width()/2)-($(this).outerWidth()/2))+'px, 0px, 0px) perspective(600px) rotateY(0deg) scaleY(1)',
                    '-webkit-transform' : 'translate3d('+(($(this).parents('div').width()/2)-($(this).outerWidth()/2))+'px, 0px, 0px) perspective(600px) rotateY(0deg) scaleY(1)'
                });
                $('img', this).css({'opacity': alpha(this)});
                $(this).css({'z-index': ($(this).prevAll('.active').length) ? 100-$(this).index() : 100+$(this).index()});

            });


            $(window).on('load', function() {
                setTimeout(function() {
                    $(elem).children().css({'opacity': '1'});
                    $(elem).find('.loader').css({'opacity': '0'});
                    shift(elem);
                }, 1000)
            });

        } else {
            $(elem).find('li').each(function() {
                $(this).css({
                    'left'              : (($(this).parents('div').width()/2)-($(this).outerWidth()/2))+'px'
                });
                $(this).css({'z-index': ($(this).prevAll('.active').length) ? 100-$(this).index() : 100+$(this).index()});
            });

            $(window).on('load', function() {
                setTimeout(function() {
                    $(elem).children().fadeIn(600);
                    $(elem).find('.loader').fadeOut(600);
                    shift(elem);
                }, 1000)
            });
        };
    };

    var shift = function(elem) {

        if (Modernizr.csstransforms3d) {
            $(elem).find('li').each(function() {

                $(this).css({
                    'transform'         : 'translate3d('+position(this)+'px, 0px, 0px) perspective(600px) rotateY('+tilt(this)+'deg) scaleY('+scale(this)+')',
                    '-o-transform'      : 'translate3d('+position(this)+'px, 0px, 0px) perspective(600px) rotateY('+tilt(this)+'deg) scaleY('+scale(this)+')',
                    '-moz-transform'    : 'translate3d('+position(this)+'px, 0px, 0px) perspective(600px) rotateY('+tilt(this)+'deg) scaleY('+scale(this)+')',
                    '-webkit-transform' : 'translate3d('+position(this)+'px, 0px, 0px) perspective(600px) rotateY('+tilt(this)+'deg) scaleY('+scale(this)+')'
                });
                $('img', this).css({'opacity': alpha(this)});

            });

            setTimeout(function() {
                $(elem).find('li').each(function() {
                    $(this).css({'z-index': ($(this).prevAll('.active').length) ? 100-$(this).index() : 100+$(this).index()});
                });
            }, 100);

        } else {
            $(elem).find('li').each(function() {

                $(this).animate({
                    'left'              : positionStatic(this)+'px'
                }, {
                    easing      : 'swing',
                    duration    : 600,
                    queue       : false
                });

                if (resize(this)) {
                    var active = $(this).siblings('.active').index();
                    var mod = Math.abs(active-$(this).index());

                    $(this).children().animate({
                        'width'         : (100-(mod*8))+'%',
                        'margin'        : (mod*4)+'%'
                    }, {
                        easing      : 'swing',
                        duration    : 600,
                        queue       : false
                    });
                } else {
                    $(this).children().animate({
                        'width'         : '100%',
                        'margin'        : '0'
                    }, {
                        easing      : 'swing',
                        duration    : 600,
                        queue       : false
                    });
                };
                $(this).css({'z-index': ($(this).prevAll('.active').length) ? 100-$(this).index() : 100+$(this).index()});
            });

        };
    };

    var init = function(elem) {

        $(elem).append('<div class="loader"></div>');

        if (options.start === 'center') {
            $(elem).find('li').removeClass('active');
            $(elem).find('li').eq(Math.floor($(elem).find('li').length/2)).addClass('active');
        } else if (options.start === 'first') {
            $(elem).find('li').removeClass('active');
            $(elem).find('li:first-child').addClass('active');
        } else if (options.start === 'last') {
            $(elem).find('li').removeClass('active');
            $(elem).find('li:last-child').addClass('active');
        } else {
            $(elem).find('li').removeClass('active');
            $(elem).find('li').eq(options.start).addClass('active');
        };

        if (!$(elem).find('.active').length) $(elem).find('li:first-child').addClass('active');
        start(elem);
    };

    var events = function(elem) {
        $(elem).find('li').on('click', function() {
            $(this).siblings().removeClass('active');
            $(this).addClass('active');
            shift(elem);
        });
    };

    return this.each(function() { init(this); events(this); } );
};

function sliderNew(options) {
    var options = options || [],
            sliderNew = $('.sliderNew');

    sliderNew.each(function(){
        var _this = $(this),
                labels =  _this.find('.labels > label'),
                labelsLength = labels.length-1,
                slider = _this.find('.slider'),
                sliderVert = _this.find('.slider-vertical'),
                sliderHoriz = _this.find('.slider-horizontal');
        sliders(slider);

        slider.append('<span class="start"></span><span class="end"></span>');
        labels.each(function(){
            $(this).append('<span class="dash"></span>');
        });

        if (sliderVert.length) {
            var _h = parseInt(sliderVert.height()/labelsLength);
            labels.height(_h);
            labels.css('line-height', _h+'px');
            labels.parent().css('top', -_h/2+'px');
        } else {
            var _w = parseInt(sliderHoriz.width()/labelsLength);
            labels.width(_w);
            labels.parent().css('left', -_w/2+'px');
        };
        labels.parent().width(1+_w*labels.length)
    });

    sliderNew.find('.labels label').on('click', function(){
        var _this = $(this);
        var slider = _this.parent().siblings('.ui-slider');
        _this.addClass('violet').siblings().removeClass('violet');
        slider.slider({
            value: _this.find('input').val()
        });
        slider.siblings('.amount').val( _this.find('input').val());
    });


    function sliders(s) {
        var _this       = s,
            labels      = _this.siblings('.labels'),
            maxVal      = labels.find('label').length-1,
            active      = labels.find('label.active'),
            activeVal   = active.find('input').val(),
            orientation = (_this.parent().find('.slider-vertical').length) ? 'vertical' : 'horizontal',
            amount      =  _this.siblings('.amount');

        var config = {
            callbacks   : {
                create      : function(){ },
                start       : function(){ },
                slide       : function(){},
                change      : function(){},
                stop        : function(){}
            }
        };

        for (var i = 0; i < options.length; i++) {
            if (_this.attr('id') === options[i].id) config = $.extend(true, {}, config, options[i].config);
        };

        active.addClass('violet');

        _this.slider({
            orientation : orientation,
            range       : 'min',
            min         : 0,
            max         : maxVal,
            value       : activeVal,

            create      : config.callbacks.create(),
            start       : config.callbacks.start(),
            start       : config.callbacks.start(),
            slide       : function(e, ui) {
                _this.siblings('.amount').val( ui.value );
                var labelEq = ui.value;
                if(orientation=='vertical') labelEq = maxVal - ui.value;
                labels.find('label').removeClass('violet').eq(labelEq).addClass('violet');
                setTimeout(function() { config.callbacks.slide(); }, 100);
            },
            change      : function() {
                setTimeout(function() { config.callbacks.change(); }, 100);
            },
            stop        : config.callbacks.stop()
        });
         amount.val(activeVal);
    }
}

function filtersOptions() {
        var  options = $('.filters .options > ul'),
                producent = options.find('.producent'),
                ieMobile = navigator.userAgent.match(/IEMobile/i),
                touch = $('.touch').length,
                body = $('body'),
                systemBox = options.find('.system');

        if(!ieMobile) {
			options.find('.arrow').on('click', function(){

				var _this = $(this);
				if(_this.parents('li').hasClass('producent')) {
					var hiddenUl = _this.parents('.hiddenUl');
					if(hiddenUl.hasClass('visible')) {
						hiddenUl.removeClass('visible').show();
					} else {
						hiddenUl.addClass('visible').hide();
					}
					_this.parents('li').siblings().find('.hiddenUl').hide();
				} else {
					if(_this.hasClass('up')) {
						var hiddenUl = _this.parents('.hiddenUl');
						hiddenUl.addClass('visible').hide();
					} else {
						var hiddenUl = _this.siblings('.hiddenUl');
						hiddenUl.removeClass('visible').show();
					}
					hiddenUl.parents('li').siblings('li').find('.hiddenUl').addClass('visible').hide();
				}
			});

            body.on('click', function(e){
                hideUl(e.target);
            });

            $(window).on('scroll', function(){
                options.find('.hiddenUl').addClass('visible').hide();
            });

        } else {
            options.children('li').on('click', function(){
                $(this).find('.hiddenUl').removeClass('visible').show();
            });
        }

        if(touch>0 ) {
            body.on('touchstart', function(e){
                hideUl(e.target);
            });
       } else if(ieMobile) {
            body.on('click', function(e){
                hideUl(e.target);
            });
       }

         function hideUl(target) {
                if(!body.find(target).parents().hasClass('options') || (body.find(target).parents().hasClass('options') && body.find(target).parents().hasClass('last')) ) options.find('.hiddenUl').addClass('visible').hide();

               var count = systemBox.find('.styleCheckbox.checked').length;
               if(count==0) {
                    systemBox.find('h3 span').html('');
                } else {
                   systemBox.find('h3').each(function(){
                        var _this = $(this);
                        if(_this.find('span').length==0) _this.append('<span class="normal"> ('+count+')</span>');
                        else { _this.find('span').html(' '+'('+count+')'); }
                   });
               }
         }

        producent.find('input').on('change', function(){
            var _this = $(this),
                   _parent = _this.parent('label').parent('li'),
                   styleCheckbox = _this.siblings('.styleCheckbox'),
                   main = _parent.siblings('.main');
            if(styleCheckbox.hasClass('checked')) main.after(_parent);
            else  _this.parents('.hiddenUl').append(_parent);
         });

         $('.lt-ie9 .producent .hiddenUl label').each(function(){
            var  _this = $(this),
                    w1 = _this.find('.styleCheckbox').width(),
                    w2 = _this.find('.textCheckbox').width();
             _this.width(w1+w2+5);
         });
}

/* Animowane przesunięcie tła na określoną pozycję */
$.fn.animateBg = function(options) {

    var defaults    = {
        x   : 0,
        y   : 0,
        time: 500,
        ease: 'swing'
    };

    var options     = jQuery.extend(true, {}, defaults, options);
    var pos         = this.css('background-position').split(' ');
    var $element    = this;

    $({
        x: parseInt(pos[0]) || 0,
        y: parseInt(pos[1]) || 0
    }).animate({
        x: options.x,
        y: options.y
    }, {
        duration: options.time,
        easing: options.ease,
        step: function(now, fx) {
            $element.css('background-position', this.x+'px '+this.y+'px');
        }
    });

    return this;
}



$.fn.infotip = function (options) {

  var defaults = {
    order       : 0,
    orderShow   : false,
    orderMod    : 0,
    title   : '',
    text        : '',
    audio       : '',
    position    : 'def',
    shift       : {
      def         : {x: 18, y: -47},
      bottom      : {x: -86, y: 20},
      top         : {x: -86, y: -20}
    },
    correction  : {
      top         : 0,
      left        : 0
    },
    next        : false,
    prev        : false,
    screen : '',
    triangleCount : 1,
    addedClass : ''
  };
  if (typeof options === 'object') options = $.extend({}, defaults, options);

  var position = function(elem, tooltip) {
    if (typeof options !== 'object') {
      options = {
        correction  : {top: parseInt(tooltip.attr('data-correction-top')), left: parseInt(tooltip.attr('data-correction-left'))},
        position    : tooltip.attr('data-position'),
        shift       : {}
      };
      options.shift[tooltip.attr('data-position')] = {x:parseInt(tooltip.attr('data-shift-x')),y:parseInt(tooltip.attr('data-shift-y'))};
    };
    var left, top;
    /*  if (options.position === 'def') {
     left = $(elem).offset().left + $(elem).outerWidth() + options.correction.left + options.shift.def.x;
     top = $(elem).offset().top + ($(elem).outerHeight()/2) + options.correction.top + options.shift.def.y;
     } else if (options.position === 'bottom') {
     left = $(elem).offset().left + $(elem).outerWidth() + options.correction.left + options.shift.bottom.x;
     top = $(elem).offset().top + ($(elem).outerHeight()) + options.correction.top + options.shift.bottom.y;
     }else if (options.position === 'top') {
     left = $(elem).offset().left + $(elem).outerWidth() + options.correction.left + options.shift.top.x;
     top = $(elem).offset().top - tooltip.outerHeight() + options.correction.top + options.shift.top.y;
     };*/

    left = options.correction.left + options.shift.def.x;
    top = options.correction.top + options.shift.def.y;

    tooltip.css({
      'left'  : (parseInt(left))+'px',
      'top'   : (parseInt(top))+'px'
    });

  };

  var init = function (elem) {
    clearTimeout(infoHelper.repeat);
    infoHelper.onEnd = function() {
      infoHelper.repeat = setTimeout(function() {
        infoHelper.onEnd = function() {};
      }, 20000);
    };

    var id = new Date().getTime().toString(36),
      tooltip = $('<div id="'+id+'" class="infotip '+options.addedClass+'" />'),
      triangle = '';
    $(elem).attr('data-infobox', id);

    if(options.triangleCount===3) triangle = '<span class="arrow left"></span><span class="arrow right"></span>';

    var nextClass = 'linkPointer',
      nextText = 'Dalej';
    if(options.addedClass==='t0') {
      nextClass = 'blueButtonSmall';
      nextText = 'Start';
    }

    tooltip.html(options.screen+'<div class="cloud"><div class="content clearfix"><div class="arrow '+options.position+'"></div>'+triangle+'<a class="linkPointer close"><span>Wyłącz pomoc</span></a><h1>'+options.title+'</h1><p>'+options.text+'</p></div><ul class="actions clearfix"><li><a href="#" class="cta-small prev linkPointer"><span>Wstecz</span></a></li><li><a href="#" class="next '+nextClass+'"><span>'+nextText+'</span></a></li></ul></div>');
    tooltip.attr({
      'data-position'         : options.position,
      'data-shift-x'          : options.shift[options.position].x,
      'data-shift-y'          : options.shift[options.position].y,
      'data-correction-left'  : options.correction.left,
      'data-correction-top'   : options.correction.top
    });

    if (options.prev === false) $('.prev', tooltip).addClass('disabled');
    if (options.next === false) $('.next', tooltip).addClass('disabled');
    if (options.prev === false && options.next === false) {
      $('.actions', tooltip).hide();
      if (!options.orderShow) $('span', tooltip).html('&nbsp;');
    };
    $('.prev', tooltip).on('click', function() {
      if (options.prev !== false) options.prev();
      return false;
    });
    $('.next', tooltip).on('click', function() {
      if (options.next !== false) options.next();
      return false;
    });

    $('.close', tooltip).on('click', function() {
      // closeTutorial();
      $(this).parents('.infotip').remove();
      $('.infotipBg').hide();
      return false;
    });

    $('body .infotipBg > div').append(tooltip);
    position(elem, tooltip);
    setTimeout(function() {
      tooltip.css('opacity', '1');
    }, 100);

    return false;
  };

  var hide = function(elem) {
    clearTimeout(infoHelper.repeat);
    infoHelper.onEnd = function() {};

    var id = $(elem).attr('data-infobox'),
      tooltip = $('#'+id);
    $(elem).removeAttr('data-infobox');

    if ($('html').hasClass('lt-ie9')) tooltip.remove();
    else {
      tooltip.css('opacity', '0');
      $('.actions a', tooltip).unbind('click');
      $('.actions a', tooltip).bind('click', function() { return false; });
      setTimeout(function() {
        tooltip.remove();
      }, 400);
    };
  };

  return this.each(function () {
    if (typeof options === 'object') init(this);
    else {
      if (options === 'hide') hide(this);
      if (options === 'reposition') position(this, $('#'+$(this).attr('data-infobox')));
    };
  });
};

var infoHelper = {
  defaultNext     : function(order, elements, options) {
    $(elements[order]).infotip('hide');
    $(elements[order+1]).infotip(options[order+1]);
    infoHelper.step = order+1;
  },
  defaultPrev     : function(order, elements, options) {
    $(elements[order]).infotip('hide');
    $(elements[order-1]).infotip(options[order-1]);
    infoHelper.step = order-1;
  },
  onEnd           : function() {},
  repeat          : function() {},
  step            : 'start'
};

var start = function(start, init) {
  if (start === 0) infoHelper.step = 0;

  if (infoHelper.step === 'start') {
    infoHelper.onEnd = function() {
      setTimeout(function() {
        init();
        infoHelper.step = 0;
      }, 700);
    };
  } else init();
};

var turnHelp = function(state) {
  if (state === 'off') {
    clearTimeout(infoHelper.repeat);
    infoHelper.onEnd = function() {};
    $('[data-infobox]').infotip('hide');
  } else if (state === 'on') {

    if (infoHelper.step === 'start') initHelp();
    else $(elements[infoHelper.step]).infotip(options[infoHelper.step]);

  };
};

/* Plugin formularzy */
jQuery.fn.forms = function(options) {
  var defaults = {
    use                    : {
      defaultLabels      : true,
      customCheckbox     : true,
      customRadio        : true,
      customSelect       : true,
      customFile         : true,
      textScroll         : true
    },
    /* pokazywanie i ukrywanie domyĹlnych wartoĹci na focusie i blurze */
    labels                 : {
      list               : {},
      elem               : 'input[type=text]',
      trigger            : function(elem) {

        var key, i = 0;
        jQuery(elem).find(options.labels.elem).not('.pickDate, .not').each(function() {

          /* tworzenie nazw dla nienazwanych inputĂłw */
          if (jQuery(this).attr('name') != undefined) key = jQuery(this).attr('name');
          else {
            i++;
            key = 'unnamed' + i;
            jQuery(this).attr('name', key);
          }

          /* zapisywanie domyĹlnych wartoĹci do tablicy */
          options.labels.list[key] = jQuery(this).val();

          /* zdarzenia */
          jQuery(this).bind('focus', function() {
            if (jQuery(this).val() == options.labels.list[jQuery(this).attr('name')]) jQuery(this).val('');
          });
          jQuery(this).bind('blur', function() {
            if (jQuery(this).val() == '') jQuery(this).val(options.labels.list[jQuery(this).attr('name')]);
          });

        });

      }
    },
    /* customowe checkboxy */
    checkbox            : {
      elem            : 'input[type=checkbox]',
      cssClass        : 'customCheckbox',
      trigger         : function(elem) {

        jQuery(elem).find(options.checkbox.elem).each(function() {

          /* generowanie htmla zastÄpujÄcego input */
          var parent = jQuery(this).parent();
          var label = (parent.is('label')) ? true : false;
          parent.wrapInner('<span class="labelText f15" />').addClass(options.checkbox.cssClass);
          parent.find(options.checkbox.elem).prependTo(parent).css({'position': 'absolute', 'left': '-5000px'});
          jQuery(this).after('<span class="checkbox"></span>');

          var width = parent.width() - parent.find('.checkbox').outerWidth(true)+1;
          if (label) parent.find('.labelText').css('width', width+'px');

          if (jQuery(this).is(':checked')) jQuery(this).next().addClass('checked');

          /* zdarzenia */
          jQuery(this).bind('change', function() {
            options.checkbox.toggle(parent);
          });
          if (label == false) {
            parent.find('.checkbox').bind('click', function() {
              jQuery(this).prev().attr('checked', !jQuery(this).prev().is(':checked'));
              options.checkbox.toggle(parent);
            });
          }

        });

      },
      toggle          : function(elem) {

        elem.find('.checkbox').toggleClass('checked');
        if (elem.find('.checkbox').hasClass('checked') && !elem.find('input').is(':checked')) elem.find('.checkbox').removeClass('checked');
        if (!elem.find('.checkbox').hasClass('checked') && elem.find('input').is(':checked')) elem.find('.checkbox').addClass('checked');

        /* check all */
        if (elem.find('input').hasClass('all')) jQuery('input[rel=' + $(elem).find('input').attr('name') + ']').attr('checked', $(elem).find('input').is(':checked')).trigger('change');

      },
      onChange        : function(){}
    },
    /* customowe radio */
    radio               : {
      elem            : 'input[type=radio]',
      cssClass        : 'customRadio',
      trigger         : function(elem) {

        jQuery(elem).find(options.radio.elem).each(function() {

          /* generowanie htmla zastÄpujÄcego input */
          var parent = jQuery(this).parent();
          parent.wrapInner('<span class="text" />').addClass(options.radio.cssClass);
          parent.find(options.radio.elem).prependTo(parent).css({'position': 'absolute', 'left': '-5000px'});
          jQuery(this).after('<span class="radio"></span>');
          if (jQuery(this).is(':checked')) jQuery(this).next().addClass('checked');

          /* zdarzenia */
          jQuery(this).bind('change', function() {
            options.radio.toggle(parent);
          });

        });

      },
      toggle          : function(elem) {

        elem.parent().find('.radio').removeClass('checked');
        elem.find('.radio').addClass('checked');
        options.radio.onChange();

      },
      onChange        : function(){}
    },
    /* custom select */
    select             : {
      elem           : 'select',
      cssClass       : 'customSelect',
      width          : 'css',
      animate        : false,
      trigger        : function(elem) {

        jQuery(elem).find(options.select.elem).each(function() {

          /* generowanie htmla zastÄpujÄcego select */
          var select = jQuery('<div class="' + options.select.cssClass + '" />');
          jQuery(this).before(select).css({'position': 'absolute', 'left': '-5000px'});
          select.append('<div class="choosen">' + jQuery(this).find('option:selected').text() + '</div><div class="pointer"></div>').append('<ul class="options"></ul>');
          jQuery(this).find('option').each(function() {
            select.find('ul').append('<li class="singleOption">' + jQuery(this).text() + '</li>');
            if (jQuery(this).text() == jQuery('.choosen').text()) select.find('ul li:last-child').addClass('selected');
          });

          /* ustawianie automatycznej wysokoĹci jeĹźeli select.width jest ustawione na 'auto' */
          if (options.select.width == 'auto') {
            var width = jQuery(this).width(),
              diff  = select.outerWidth() - select.width();
            width -= diff;
            select.css('width', width+'px');
          }

          /* zdarzenia */
          select.bind('click', function() {
            if (options.select.animate) jQuery(this).find('.options').slideToggle(100);
            else jQuery(this).find('.options').toggle();
          });

          select.find('.options li').bind('click', function() {
            jQuery('.choosen').text(jQuery(this).text());
            jQuery(this).siblings().removeClass('selected');
            jQuery(this).addClass('selected');
            jQuery('select option').eq(jQuery(this).index()).attr('selected', 'selected');
            options.select.onChange();
          });

          jQuery(document).mouseup(function(e) {
            if(!jQuery(e.target).is('.' + options.select.cssClass + ' .choosen') && !jQuery(e.target).is('.' + options.select.cssClass + ' .pointer') && !jQuery(e.target).is('.' + options.select.cssClass + ' .singleOption')) {
              if (options.select.animate) select.find('.options').slideUp(100);
              else select.find('.options').hide();
            }
          });

        });

      },
      onChange        : function(){}
    },
    /* customowy file */
    file                : {
      elem            : 'input[type=file]',
      cssClass        : 'customFile',
      text            : 'przeglądaj',
      trigger         : function(elem) {

        jQuery(elem).find(options.file.elem).each(function() {

          /* generowanie htmla zastÄpujÄcego input */
          jQuery(this).wrap('<div class="' + options.file.cssClass + '" />').before('<input type="text" readonly="readonly"/>').wrap('<div class="button" />');
          if (options.file.text != false) jQuery(this).before('<p>' + options.file.text + '</p>');

          /* zdarzenia */
          jQuery(this).bind('change', function() {
            jQuery(this).parent().prev('input').val(jQuery(this).val());
          });

        });

      }
    },
    /* customowy scrollbar textarea */
    textScroll          : {
      elem            : 'textarea',
      cssClass        : 'textScroll',
      falseClass      : 'falseScrolling',
      calculatePointer: function(textarea, scrollArea, diff) {

        /* obliczanie wysokoĹci scrolla */
        if ((textarea.scrollHeight - diff) > $(textarea).height()) var pointerHeight = scrollArea - (((textarea.scrollHeight - diff) - $(textarea).height()) / 2);
        else var pointerHeight = scrollArea;
        if (pointerHeight < 24) pointerHeight = 16;

        (pointerHeight == scrollArea) ? html.scroll.addClass('inactive') : html.scroll.removeClass('inactive');

        return pointerHeight;

      },
      calculateTop    : function(textarea, pointerHeight, diff) {

        /* obliczanie gĂłrnego marginesu scrolla */
        if (textarea.scrollHeight > jQuery(textarea).height()) {
          var pointerTop = textarea.scrollHeight - textarea.clientHeight;
          if (pointerTop != 0) {
            pointerTop = textarea.scrollTop / pointerTop;
            pointerTop = (html.scrollTrack.height() - pointerHeight) * pointerTop;
          }
        }
        else var pointerTop = 0;
        return pointerTop;

      },
      trigger         : function(elem) {

        jQuery(elem).find(options.textScroll.elem).not('.' + options.textScroll.falseClass).each(function() {

          /* generowanie htmla zastÄpujÄcego zwykĹy scroll */

          html = {
            scroll          : jQuery('<div class="textScroll" />'),
            scrollTop       : jQuery('<div class="top" />'),
            scrollTrack     : jQuery('<div class="track" />'),
            scrollBottom    : jQuery('<div class="bottom" />'),
            pointer         : jQuery('<div class="pointer" />'),
            listen          : true
          }

          jQuery(this).after(html.scroll);

          if (jQuery(this).parent().css('position') != 'absolute' || jQuery(this).parent().css('position') != 'relative') jQuery(this).parent().css('position', 'relative');

          html.scroll.css({'height': jQuery(this).outerHeight()+'px', 'top': jQuery(this).position().top+'px', 'left': (jQuery(this).position().left+jQuery(this).outerWidth() - html.scroll.outerWidth())+'px'});
          html.scroll.append(html.scrollTop, html.scrollTrack, html.scrollBottom);

          var scrollArea = html.scroll.height() - (html.scrollTop.outerHeight(true) + html.scrollBottom.outerHeight(true)) + 1;
          html.scrollTrack.css({'height': scrollArea +'px'});
          html.scrollTrack.append(html.pointer);

          var pointerHeight = options.textScroll.calculatePointer(this, scrollArea, diff);
          var pointerTop = options.textScroll.calculateTop(this, pointerHeight), diff;

          html.pointer.css({'height': pointerHeight+'px', 'top': pointerTop+'px'});

          var textarea = this;
          var diff = textarea.scrollHeight - $(textarea).height();
          if (diff < 0) diff = 0;

          /* zdarzenia */

          html.scrollTop.bind('click', function() {
            textarea.scrollTop -= 20;
          });
          html.scrollBottom.bind('click', function() {
            textarea.scrollTop += 20;
          });

          html.pointer.bind('mousedown', function(e) {
            var coords = {
              y       : e.clientY,
              cur     : html.pointer.position().top,
              max     : scrollArea - pointerHeight,
              top     : textarea.scrollTop
            }
            var line = (textarea.scrollHeight - textarea.clientHeight) / coords.max;

            html.listen = false;

            jQuery('html').bind('mousemove', function(e) {
              if (coords.cur - (coords.y - e.clientY) < 1) html.pointer.css({'top': '0px'});
              else if (coords.cur - (coords.y - e.clientY) > coords.max) html.pointer.css({'top': coords.max+'px'});
              else html.pointer.css({'top': (coords.cur - (coords.y - e.clientY)) + 'px'});

              var diff = ((coords.y - e.clientY) * line) * -1;
              textarea.scrollTop = coords.top + diff;
            });
            jQuery('html').bind('mouseup', function(e) {
              html.listen = true;
              jQuery('html').unbind('mousemove');
            });
            jQuery('html').bind('mouseleave', function(e) {
              html.listen = true;
              jQuery('html').unbind('mousemove');
            });
            return false
          });

          /* aktualizowanie scrolla */

          var scrollListener = setInterval(function(listen) {

            if (html.listen == true) {
              pointerHeight = options.textScroll.calculatePointer(textarea, scrollArea, diff);
              pointerTop = options.textScroll.calculateTop(textarea, pointerHeight, diff);
              html.pointer.css({'height': pointerHeight+'px', 'top': pointerTop+'px'});
            }

          }, 50);

        });
      }
    }

  };
  var options = jQuery.extend(true, defaults, options);

  var init = function(elem) {

    if (options.use['defaultLabels']) options.labels.trigger(elem);
    if (options.use['customCheckbox']) options.checkbox.trigger(elem);
    if (options.use['customRadio']) options.radio.trigger(elem);
    if (options.use['customSelect']) options.select.trigger(elem);
    if (options.use['customFile']) options.file.trigger(elem);
    if (options.use['textScroll']) options.textScroll.trigger(elem);

  };

  var events = function(elem) {



  };
  return this.each(function() {init(this);events(this);});
};
