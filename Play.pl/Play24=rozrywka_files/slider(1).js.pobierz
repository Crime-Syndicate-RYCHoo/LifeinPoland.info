/**
 * @name ChangeLimits
 * @author kfb
 *
 * Basic usage:
 * var changeLimits = new ChangeLimits();
 * changeLimits.init();
 *
 * additionally you can use methods like changeLimits.methodName();
 *
 * Advanced usage:
 * var changeLimits = new ChangeLimits({
 *      "additionalOption": "thatCanOvervriteDefaults"
 * });
 *
 */
function ChangeLimits(opts) {

    var valMap = opts['valArray'];

    var valMapInt = valMap.map(function(item) {
        return item;
    });

    valMapInt.sort(function(a, b){return a-b});

    var initLimit = opts['initLimit'] ? opts['initLimit'] : valMapInt[0];
    var initIndex = opts['initIndex'] ? opts['initIndex'] : 0;
    var initLimit = opts['initLimit'] ? opts['initLimit'] : valMapInt[0];
    var initIndex = opts['initIndex'] ? opts['initIndex'] : 0;
    var that = $('#serviceModal');
    var contener = that.find('.sliderContener');
    var maxLimit = valMapInt[valMapInt.length-1];
    var userLimit = valMapInt[0];
    var unit = contener.find('.unit').val();
    var description = contener.find('.desc').val();
    var sliderWidth = 440;
    var segment = parseInt(sliderWidth/(valMapInt.length-1));

    /*
     INITIALIZE
     */
    var init = function(opts) {

        //bind events on init
        //_root.bindEvents();
        initSlider(opts);
    }

    /*
     Slider
     */
    var initSlider;
    initSlider = function (opts) {

        that.parent('tr').next('.sliderTr').children("td").hide();
        contener.find(".sliderContener").show();

        var sliderSteps = $.map(Object.keys(valMapInt), function(value) {
            return value * segment;
        });

        $('.limitLeft').text(valMapInt[0] + ' ' + unit);
        $('.limitRight').text(maxLimit + ' ' + unit);
        contener.show();

        if (contener.hasClass('sliderContener')) {
            $('.limitSlider', contener).customSlider({
                type: 'default',
                value: {max: maxLimit},
                input: {
                    display: 'none',
                    division: 1
                },
                sliderSteps: sliderSteps,
                callback: {
                    onDrag: sliderAction,
                    onKeyUp: sliderAction,
                    onDrop: sliderAction,
                    onAnimateEnd: sliderAction,
                    onClick: sliderAction,
                    ready: function () {
                        if ($('.limiter input', contener).length == 0) {
                            $('.limiter', contener).html('').append($('.sliderInput', contener).clone(true).attr('maxlength', '1'))
                        }
                        $('p .sliderInput, p input', contener).show();
                        $('p input', contener).bind('keydown keyup', function () {
                            $('.userLimit', contener);
                        });

                        //setting default value
                        $('.limiter .sliderInput input', contener).val(userLimit).keyup();

                        $('.sliderContainer').on('click', function (event) {
                            var posX = event.pageX - $(this).offset().left-10;
                            var rest = (posX % segment);
                            var newIndex = (posX - rest) / segment;
                            if(rest > segment/2)
                                newIndex = newIndex + 1;

                            if(newIndex >= valMapInt.length) {
                              newIndex = valMapInt.length - 1;
                            }

                            $('.sliderHandle').css({'left': newIndex * segment});
                        });

                        // za duzo krok√≥w! - pierwszy i - ostatni
                        for(var i=1; i<valMapInt.length - 1; i++){
                            $('.sliderTrack').append("<div class=\"scale-top\" style=\"left:" + i*segment + "px;\"></div>");
                            $('.sliderTrack').append("<div class=\"scale-bottom\" style=\"left:" + i*segment + "px;\"></div>");
                        }
                    }
                }
            });

            contener.find('.userLimit').css({'width': '100%'});
            contener.find('.userLimit').html(description + ' ' + initLimit + ' ' + unit);
            $('.sliderHandle').css({'left': initIndex * segment});
            $('.sliderActiveTrack').css({'width': initIndex * segment});
        }

    };

    var sliderAction = function() {
      var size = $('.sliderContainer .sliderHandle').offset().left - $('.sliderContainer').offset().left;
      size = String(size).replace('.', ',');

      var idx = parseInt(size/segment);
      if(size % segment >= segment/2 && sliderWidth-size > segment)
        idx = idx + 1;

      if(idx >= valMapInt.length) {
        idx = valMapInt.length - 1;
      }

      contener.find('.userLimit').css({'width': '100%'});

      if(valMapInt[idx] !== undefined)
        contener.find('.userLimit').html(description + ' ' + valMapInt[idx] + ' ' + unit);

      $('p input', contener).val( valMapInt[idx] );
      $('.sliderHandle').css({'left': idx*segment});

      $('.sliderActiveTrack').css({'width': idx*segment});

    }

    init(opts);
}
